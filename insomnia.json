{"_type":"export","__export_format":4,"__export_date":"2021-07-23T23:25:44.667Z","__export_source":"insomnia.desktop.app:v2021.4.1","resources":[{"_id":"req_e5974211f1384f2492b737080d8fd5c0","parentId":"fld_357d8955bc1d4056ab77fe96a4d4a2f5","modified":1627080149332,"created":1626040575547,"url":"{{baseUrl}}/api/lists/youtube/videos","name":"Get list of blacklisted YouTube video IDs","description":"Will retrieve the list of YouTube video IDs that are globally blacklisted, and (optionally using a query parameter) those that are blacklisted for a specific guild.\n\nThe result set can either be compact or detailed, although the latter does not contain any useful information, it is used only internally for the UI.\n\n**Possible errors:**\n\n| **Status code** | **Error code**    | **Description**                                                                         |\n|-----------------|-------------------|-----------------------------------------------------------------------------------------|\n| 401             | NOT_AUTHENTICATED | Will be returned if an API key was not provided or a user isn't logged into the web UI. |\n| 401             | ACCESS\\_TO\\_GUILD\\_DENIED | Will be returned if the supplied API key does not belong to the guild ID specified in the request. |\n\n```response:200\n{\n  \"ok\": true,\n  \"videoIDs\": [\n    \"dQw4w9WgXcQ\",\n    \"Y1tHNKH7AAM\",\n    \"...\"\n  ]\n}\n```","method":"GET","body":{},"parameters":[{"name":"compact","value":"false","description":"Specifies whether the response should be compact (`videoIDs` is an array of video IDs) or if it should contain the database entries for the video IDs (mostly used internally). By default, the app will return a compact result. Setting this query parameter to `false` will return the database entries instead.","id":"pair_420ed613ca6f4129872cc3beb68a41ff","disabled":true},{"name":"guild","value":"481267216386621440","description":"The ID of the guild whose custom blacklist should also be included in the result set.","id":"pair_7489ea3ee07a4242a870b8db38425399","disabled":true},{"id":"pair_340d84fb6f16471181e1d4911dc8e7aa","name":"strict","value":"true","description":"Return only the entries for this guild (excluding the global blacklist).","disabled":true}],"headers":[{"name":"Authorization","value":"{{apikey}}","description":"","id":"pair_d09e9c01137d483fa07abb5f1e9c2363"}],"authentication":{},"metaSortKey":-1626040575604,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_357d8955bc1d4056ab77fe96a4d4a2f5","parentId":"fld_91d21eb5bf534b1d9fdf3ee7ce855418","modified":1626040562133,"created":1626040562133,"name":"YouTube videos","description":"","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1626040562133,"_type":"request_group"},{"_id":"fld_91d21eb5bf534b1d9fdf3ee7ce855418","parentId":"wrk_b9cc625913f54ff8bb657d700b22c7a4","modified":1626040553988,"created":1626040553988,"name":"Blacklists","description":"","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1626040553988,"_type":"request_group"},{"_id":"wrk_b9cc625913f54ff8bb657d700b22c7a4","parentId":null,"modified":1627080047644,"created":1626018607997,"name":"NakiriAPI","description":"**NakiriAPI** is an attempt at having a centralized database of blacklisted YouTube video and channel IDs, as well as link regex patterns. These blacklists are intended to be used in fan Discord servers, specifically those centered around Hololive/Virtual YouTubers.\n\nThe goal is to make it easier for said Discord servers to manage their blacklists and help everyone else when adding new entries to them.\n\n**The MVP of the app allows the following:**\n\n- Support for multiple users with varying access levels\n- Web UI for managing blacklists\n- Global and per-guild blacklists\n- Access to an API endpoint to fetch the blacklists using an API key\n- Access to an API endpoint to add new entries to the blacklists using an API key\n\n**Possible future goals include:**\n\n- Having an API endpoint you can hit to analyze a message and its links and decide whether any blacklisted content has been found (DONE but very fragile)\n- Automatically detect and add YouTube video IDs that have not yet been added to the database, but the YouTube channel on which they were uploaded is in the database (DONE but very fragile)\n- Audit logs/analysis reports\n\nWe already have the algorithms for these features in our own bot, however, these features imply a huge traffic, so we have yet to think about the engineering side of it.\n\nThe app is closed-source, but MIT licensed. You can get access to the private GitHub repo by messaging me (joexyz#0137) on Discord.\n\nWe hope this service will be useful in the long run across more and more fan Discord servers.\n\n-- joexyz and the rest of the Senzawa Fan Discord staff.","scope":"collection","_type":"workspace"},{"_id":"req_8dc025730da947fab11484255c2ec95b","parentId":"fld_357d8955bc1d4056ab77fe96a4d4a2f5","modified":1627080162313,"created":1626041719383,"url":"{{baseUrl}}/api/lists/youtube/videos","name":"Add YouTube video ID to the blacklist","description":"Will add a given YouTube video ID to the blacklist. Specifying the `guild` query parameter will add the video ID to the guild's own blacklist.\n\n**Possible errors:**\n\n| **Status code** | **Error code**          | **Description**                                                                                                                                                   |\n|-----------------|-------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| 401             | NOT_AUTHENTICATED       | Will be returned if an API key was not provided or a user isn't logged into the web UI.                                                                           |\n| 401             | ACCESS\\_TO\\_GUILD\\_DENIED | Will be returned if the supplied API key does not belong to the guild ID specified in the request. |\n| 400             | MISSING\\_VIDEO\\_ID      | The request's body does not contain a `videoID` (case-sensitive).                                                                                                 |\n| 400             | INVALID\\_VIDEO\\_ID      | The supplied ID is not a valid YouTube video ID. A valid ID must be 11 characters long and only contain letters, numbers, as well as - (dash) and _ (underscore). |\n| 400             | ID\\_ALREADY\\_EXISTS     | The ID already exists in the global blacklist or the guild's own blacklist.                                                                                       |\n| 500             | INTERNAL\\_SERVER\\_ERROR | Something unexpected happened.                                                                                                                                    |\n\n```response:200\n{\n  \"ok\": true\n}\n```","method":"POST","body":{"mimeType":"application/json","text":"{\n\t\"videoID\": \"{{rickroll}}\"\n}\n"},"parameters":[{"name":"guild","value":"{{sencord}}","description":"The guild whose blacklist the video ID should be added to. If not provided, the ID will be added to the global blacklist.","id":"pair_0f324ad54a2546e6a6283b95a4a4421d","disabled":true}],"headers":[{"name":"Authorization","value":"{{apikey}}","description":"","id":"pair_ece050275d9a48ce9317108e4c755728"},{"name":"Content-Type","value":"application/json","id":"pair_4dfa2fa3385c4dc0b026dd2fae620ee8"}],"authentication":{},"metaSortKey":-1626040575554,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_6fb383e9c65948279b1fc7b9b564e037","parentId":"fld_c1b21638835f42f3af0960f66f317468","modified":1627080169462,"created":1626127445029,"url":"{{baseUrl}}/api/lists/youtube/channels","name":"Get list of blacklisted YouTube channel IDs","description":"Will retrieve the list of YouTube channel IDs that are globally blacklisted, and (optionally using a query parameter) those that are blacklisted for a specific guild.\n\nThe result set can either be compact or detailed, although the latter does not contain any useful information, it is used only internally for the UI.\n\n**Possible errors:**\n\n| **Status code** | **Error code**    | **Description**                                                                         |\n|-----------------|-------------------|-----------------------------------------------------------------------------------------|\n| 401             | NOT_AUTHENTICATED | Will be returned if an API key was not provided or a user isn't logged into the web UI. |\n| 401             | ACCESS\\_TO\\_GUILD\\_DENIED | Will be returned if the supplied API key does not belong to the guild ID specified in the request. |\n\n```response:200\n{\n  \"ok\": true,\n  \"channelIDs\": [\n    \"UCuAXFkgsw1L7xaCfnd5JJOw\",\n    \"UCTkXRDQl0luXxVQrRQvWS6w\",\n    \"...\"\n  ]\n}\n```","method":"GET","body":{},"parameters":[{"name":"compact","value":"false","description":"Specifies whether the response should be compact (`videoIDs` is an array of video IDs) or if it should contain the database entries for the video IDs (mostly used internally). By default, the app will return a compact result. Setting this query parameter to `false` will return the database entries instead.","id":"pair_420ed613ca6f4129872cc3beb68a41ff","disabled":true},{"name":"guild","value":"560153816616665098","description":"The ID of the guild whose custom blacklist should also be included in the result set.","id":"pair_7489ea3ee07a4242a870b8db38425399","disabled":true},{"id":"pair_80b6965442eb4c6b844ca90d78975464","name":"strict","value":"true","description":"Return only the entries for this guild (excluding the global blacklist).","disabled":true}],"headers":[{"name":"Authorization","value":"{{apikey}}","description":"","id":"pair_d09e9c01137d483fa07abb5f1e9c2363"}],"authentication":{},"metaSortKey":-1626040575604,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_c1b21638835f42f3af0960f66f317468","parentId":"fld_91d21eb5bf534b1d9fdf3ee7ce855418","modified":1626127445024,"created":1626127445024,"name":"YouTube channels","description":"","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1626040558060.5,"_type":"request_group"},{"_id":"req_f6e84c551b3c4a4bac091a96a851a0f2","parentId":"fld_c1b21638835f42f3af0960f66f317468","modified":1627080175855,"created":1626127445038,"url":"{{baseUrl}}/api/lists/youtube/channels","name":"Add YouTube channel ID to the blacklist","description":"Will add a given YouTube channel ID to the blacklist. Specifying the `guild` query parameter will add the channel ID to the guild's own blacklist.\n\n**Possible errors:**\n\n| **Status code** | **Error code**          | **Description**                                                                                                                                                   |\n|-----------------|-------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| 401             | NOT_AUTHENTICATED       | Will be returned if an API key was not provided or a user isn't logged into the web UI.                                                                           |\n| 401             | ACCESS\\_TO\\_GUILD\\_DENIED | Will be returned if the supplied API key does not belong to the guild ID specified in the request. |\n| 400             | MISSING\\_CHANNEL\\_ID      | The request's body does not contain a `channelID` (case-sensitive).                                                                                                 |\n| 400             | INVALID\\_CHANNEL\\_ID      | The supplied ID is not a valid YouTube channel ID. A valid ID must be 24 characters long, start with `UC`, and only contain letters, numbers, as well as - (dash) and _ (underscore). |\n| 400             | ID\\_ALREADY\\_EXISTS     | The ID already exists in the global blacklist or the guild's own blacklist.                                                                                       |\n| 500             | INTERNAL\\_SERVER\\_ERROR | Something unexpected happened.                                                                                                                                    |\n\n```response:200\n{\n  \"ok\": true\n}\n```","method":"POST","body":{"mimeType":"application/json","text":"{\n\t\"channelID\": \"{{rickastley}}\"\n}\n"},"parameters":[{"name":"guild","value":"{{sencord}}","description":"The guild whose blacklist the video ID should be added to. If not provided, the ID will be added to the global blacklist.","id":"pair_0f324ad54a2546e6a6283b95a4a4421d","disabled":true}],"headers":[{"name":"Authorization","value":"{{apikey}}","description":"","id":"pair_ece050275d9a48ce9317108e4c755728"},{"name":"Content-Type","value":"application/json","id":"pair_4dfa2fa3385c4dc0b026dd2fae620ee8"}],"authentication":{},"metaSortKey":-1626040575554,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_6936c43ec29d47949bb7dcc41de46a38","parentId":"fld_645926e26a7747f1bce4860c5a908dfb","modified":1627080181288,"created":1626127703930,"url":"{{baseUrl}}/api/lists/link-patterns","name":"Get list of blacklisted link patterns","description":"Will retrieve the list of link regular expresison patterns that are globally blacklisted, and (optionally using a query parameter) those that are blacklisted for a specific guild.\n\nThe result set can either be compact or detailed, although the latter does not contain any useful information, it is used only internally for the UI.\n\n**Possible errors:**\n\n| **Status code** | **Error code**    | **Description**                                                                         |\n|-----------------|-------------------|-----------------------------------------------------------------------------------------|\n| 401             | NOT_AUTHENTICATED | Will be returned if an API key was not provided or a user isn't logged into the web UI. |\n| 401             | ACCESS\\_TO\\_GUILD\\_DENIED | Will be returned if the supplied API key does not belong to the guild ID specified in the request. |\n\n```response:200\n{\n  \"ok\": true,\n  \"patterns\": [\n    \"discord((app)?.(com/invite|gg))/vtubers\"\n    \"...\"\n  ]\n}\n```","method":"GET","body":{},"parameters":[{"name":"compact","value":"false","description":"Specifies whether the response should be compact (`videoIDs` is an array of video IDs) or if it should contain the database entries for the video IDs (mostly used internally). By default, the app will return a compact result. Setting this query parameter to `false` will return the database entries instead.","id":"pair_420ed613ca6f4129872cc3beb68a41ff","disabled":true},{"name":"guild","value":"560153816616665098","description":"The ID of the guild whose custom blacklist should also be included in the result set.","id":"pair_7489ea3ee07a4242a870b8db38425399","disabled":true},{"id":"pair_0c8af39270934ef794c0375812673c7b","name":"strict","value":"true","description":"Return only the entries for this guild (excluding the global blacklist).","disabled":true}],"headers":[{"name":"Authorization","value":"{{apikey}}","description":"","id":"pair_d09e9c01137d483fa07abb5f1e9c2363"}],"authentication":{},"metaSortKey":-1626040575604,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_645926e26a7747f1bce4860c5a908dfb","parentId":"fld_91d21eb5bf534b1d9fdf3ee7ce855418","modified":1626127703921,"created":1626127703921,"name":"Link patterns","description":"","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1626040556024.25,"_type":"request_group"},{"_id":"req_9b86a1d1e2e04ad8b4d5a60c30fffe60","parentId":"fld_645926e26a7747f1bce4860c5a908dfb","modified":1627080186172,"created":1626127703938,"url":"{{baseUrl}}/api/lists/link-patterns","name":"Add link pattern to the blacklist","description":"Will add a given link pattern to the blacklist. Specifying the `guild` query parameter will add the pattern to the guild's own blacklist.\n\n**Possible errors:**\n\n| **Status code** | **Error code**          | **Description**                                                                                                                                                   |\n|-----------------|-------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| 401             | NOT_AUTHENTICATED       | Will be returned if an API key was not provided or a user isn't logged into the web UI.                                                                           |\n| 401             | ACCESS\\_TO\\_GUILD\\_DENIED | Will be returned if the supplied API key does not belong to the guild ID specified in the request. |\n| 400             | MISSING\\_REGEX\\_PATTERN      | The request's body does not contain a `pattern` (case-sensitive).                                                                                                 |\n| 400             | INVALID\\_REGEX\\_PATTERN      | The supplied pattern is not a valid regular expression. The app only supports regular expression patterns that work in JavaScript. |\n| 400             | PATTERN\\_ALREADY\\_EXISTS     | The pattern already exists in the global blacklist or the guild's own blacklist.                                                                                       |\n| 500             | INTERNAL\\_SERVER\\_ERROR | Something unexpected happened.                                                                                                                                    |\n\n```response:200\n{\n  \"ok\": true\n}\n```","method":"POST","body":{"mimeType":"application/json","text":"{\n\t\"pattern\": \"discord((app)?.(com/invite|gg))/vtubers\"\n}\n"},"parameters":[{"name":"guild","value":"{{sencord}}","description":"The guild whose blacklist the video ID should be added to. If not provided, the ID will be added to the global blacklist.","id":"pair_0f324ad54a2546e6a6283b95a4a4421d","disabled":true}],"headers":[{"name":"Authorization","value":"{{apikey}}","description":"","id":"pair_ece050275d9a48ce9317108e4c755728"},{"name":"Content-Type","value":"application/json","id":"pair_4dfa2fa3385c4dc0b026dd2fae620ee8"}],"authentication":{},"metaSortKey":-1626040575554,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_ac0a735886234cd2b41ba12f98354ab9","parentId":"wrk_b9cc625913f54ff8bb657d700b22c7a4","modified":1627081873534,"created":1626964525718,"url":"{{baseUrl}}/api/analyze","name":"Analyze message (bleeding edge)","description":"An endpoint that can be used to perform checks on a given message. Currently, this endpoint is in a **bleeding edge state**, which means it can be unreliable, especially until a better mechanism is implemented for caching and traffic management. If you wish to use this endpoint, please do it **carefully** and I would only recommend doing so for messages that **contain links or Discord invites** (mainly to reduce traffic).\n\nSome of these checks will require fetching data from the YouTube API, which can slow down the analysis by a tiny bit. If the system administrator did not provide a YouTube API key in the app's configuration, the `analyzeYouTubeChannelHandles` and `preemptiveVideoIDAnalysis` properties will have no effect.\n\nThe request body can contain the following properties:\n\n| **Property**                 | **Default value** | **Description**                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n|------------------------------|-------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| content                      |                   | The content you want to analyze. This property is required.                                                                                                                                                                                                                                                                                                                                                                                               |\n| analyzeYouTubeVideoIDs       | `true`            | Whether or not the analyzer should extract and check for blacklisted YouTube video IDs.                                                                                                                                                                                                                                                                                                                                                                   |\n| analyzeYouTubeChannelIDs     | `true`            | Whether or not the analyzer should extract and check for blacklisted YouTube channel IDs.                                                                                                                                                                                                                                                                                                                                                                 |\n| analyzeYouTubeChannelHandles | `true`            | Whether or not the analyzer should extract and check for YouTube custom channel URLs that belong to a channel with a blacklisted ID.                                                                                                                                                                                                                                                                                                                      |\n| analyzeLinks                 | `true`            | Whether or not the analyzer should extract all the links from the content and check whether they match any of the blacklisted link patterns. The performance of this operation could be improved.                                                                                                                                                                                                                                                         |\n| followRedirects              | `true`            | If set to `true`, the analyzer will perform a simple HTTP request to get the real/final URL for every link it extracts.                                                                                                                                                                                                                                                                                                                                   |\n| preemptiveVideoIDAnalysis    | `true`            | If set to `true`, the analyzer will check whether the videos extracted from the YouTube IDs found in the given message belong to any channel whose ID is in the blacklisted channel IDs database. This will also add the ID of the video to the video ID blacklist (global if no `guildId` is present, otherwise the guild's own blacklist). This procedure will make sure the video will be caught faster next time an also helps update the blacklists. |\n| greedy                       | `false`           | If set to `true`, the analyzer will perform a thorough analysis of every problematic item in the message. Otherwise it will return at the first problematic item. This is useful for statistics, but for practical reasons, keeping this on `false` is recommended.                                                                                                                                                                                       |\n| guildId                      | `null`            | The ID of the guild whose blacklists should also be included in the analysis.                                                                                                                                                                                                                                                                                                                                                                             |\n| strictGuildCheck             | `false`           | Whether or not it should only use the guild's blacklists (i.e. not the global blacklists). If this is set to `true`, specifying a `guildId` is required.                                                                                                                                                                                                                                                                                                  |\n\n**Possible errors:**\n\n| **Status code** | **Error code**    | **Description**                                                                         |\n|-----------------|-------------------|-----------------------------------------------------------------------------------------|\n| 401             | NOT_AUTHENTICATED | Will be returned if an API key was not provided or a user isn't logged into the web UI. |\n| 401             | ACCESS\\_TO\\_GUILD\\_DENIED | Will be returned if the supplied API key does not belong to the guild ID specified in the request. |\n\n```response:200\n{\n  \"ok\": true,\n  \"result\": {\n    \"options\": {\n      \"analyzeYouTubeVideoIDs\": true,\n      \"analyzeYouTubeChannelIDs\": true,\n      \"analyzeYouTubeChannelHandles\": true,\n      \"analyzeLinks\": true,\n      \"followRedirects\": true,\n      \"preemptiveVideoIDAnalysis\": true,\n      \"greedy\": true,\n      \"strictGuildCheck\": false\n    },\n    \"problematic\": true,\n    \"problematicVideoIDs\": [\n      \"qM1YMeDsc-M\",\n      \"yPYZpwSpKmA\"\n    ],\n    \"problematicChannelIDs\": [],\n    \"problematicLinks\": [\n      \"discord.gg/vtubers\"\n    ]\n  }\n}\n```\n\nIn the example response:\n\n- `discord.gg/vtubers` matches a blacklisted link pattern\n- `https://bit.ly/36VAqoE` redirects to `https://www.youtube.com/watch?v=yPYZpwSpKmA` which is a video uploaded by a channel with ID `UCuAXFkgsw1L7xaCfnd5JJOw`, therefore the video ID `yPYZpwSpKmA` was caught and blacklisted\n- `https://youtube.com/watch/?v=qM1YMeDsc-M` links to the blacklisted video ID `qM1YMeDsc-M`","method":"POST","body":{"mimeType":"application/json","text":"{\n\t\"content\": \"Hello world, this is an innocent string, join the discord: discord.gg/vtubers! Also check out this thing: https://bit.ly/36VAqoE and this video: https://youtube.com/watch/?v=qM1YMeDsc-M\",\n\t\"greedy\": true\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json","id":"pair_914286551fb144139fc650f0fc1ae08f"},{"id":"pair_f41ee5480c584203a0e3a340d5724840","name":"Authorization","value":"{{apikey}}","description":""}],"authentication":{},"metaSortKey":-1626029586110.5,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_7a118f0893af4667bef43ea44983bd9c","parentId":"fld_dc58d974f1214990ac98d84ede4aec6c","modified":1626131146153,"created":1626131133228,"url":"{{baseUrl}}/api/users/authorize","name":"Authorize user","description":"","method":"POST","body":{"mimeType":"application/json","text":""},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"}],"authentication":{},"metaSortKey":-1626131133228,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_dc58d974f1214990ac98d84ede4aec6c","parentId":"wrk_b9cc625913f54ff8bb657d700b22c7a4","modified":1626018618233,"created":1626018618233,"name":"Users","description":"","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1626018618233,"_type":"request_group"},{"_id":"req_7f3b48978570419c9efe872a89aa504c","parentId":"fld_dc58d974f1214990ac98d84ede4aec6c","modified":1626022078020,"created":1626018627421,"url":"{{baseUrl}}/api/users/me","name":"Get own profile","description":"Retrieves the user who is currently logged in.\n\n```response:200\n{\n  \"ok\": true,\n  \"user\": {\n    \"name\": \"joexyz\",\n    \"email\": null,\n    \"image\": \"https://cdn.discordapp.com/avatars/245890903133257730/0a63426a531deef24da67744c364de80.png\",\n    \"id\": \"3ed60e3f-45f8-4ac7-9243-326b4ec70ba9\",\n    \"discriminator\": \"0137\",\n    \"createdAt\": \"2021-07-11T10:16:04.506Z\",\n    \"updatedAt\": \"2021-07-11T10:16:04.506Z\",\n    \"discordId\": \"245890903133257730\",\n    \"permissions\": 7\n  }\n}\n```","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1626018627421,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"env_d6e542756c8e61e93676cb78fbb93ae2e13464b0","parentId":"wrk_b9cc625913f54ff8bb657d700b22c7a4","modified":1626018608434,"created":1626018608434,"name":"Base Environment","data":{},"dataPropertyOrder":null,"color":null,"isPrivate":false,"metaSortKey":1626018608434,"_type":"environment"},{"_id":"jar_d6e542756c8e61e93676cb78fbb93ae2e13464b0","parentId":"wrk_b9cc625913f54ff8bb657d700b22c7a4","modified":1626018608445,"created":1626018608445,"name":"Default Jar","cookies":[],"_type":"cookie_jar"},{"_id":"spc_2c9f3948dd5e4a6ba5872f00bf3bdf5e","parentId":"wrk_b9cc625913f54ff8bb657d700b22c7a4","modified":1626018608004,"created":1626018608004,"fileName":"NakiriAPI","contents":"","contentType":"yaml","_type":"api_spec"},{"_id":"env_fe9daf3b900f491ea8f6cffda7fd9425","parentId":"env_d6e542756c8e61e93676cb78fbb93ae2e13464b0","modified":1627082721504,"created":1626018636466,"name":"Development","data":{"baseUrl":"http://localhost:3000","apikey":"3bfec43e-c7c0-4e8d-be72-d54860b53820","rickroll":"dQw4w9WgXcQ","rickastley":"UCuAXFkgsw1L7xaCfnd5JJOw","sencord":"560153816616665098"},"dataPropertyOrder":{"&":["baseUrl","apikey","rickroll","rickastley","sencord"]},"color":"#9c3741","isPrivate":false,"metaSortKey":1,"_type":"environment"},{"_id":"env_deeb266529fd4f51936db71e5814ad4a","parentId":"env_d6e542756c8e61e93676cb78fbb93ae2e13464b0","modified":1627082721505,"created":1627081912799,"name":"Production","data":{"baseUrl":"https://nakiriapi.nyah.life","apikey":"your-api-key-goes-here","rickroll":"dQw4w9WgXcQ","rickastley":"UCuAXFkgsw1L7xaCfnd5JJOw","sencord":"560153816616665098"},"dataPropertyOrder":{"&":["baseUrl","apikey","rickroll","rickastley","sencord"]},"color":"#1eb350","isPrivate":false,"metaSortKey":1,"_type":"environment"}]}
